<?php

namespace App\Console\Commands;

use App\Models\Tenant;
use App\Models\Domain;
use App\Jobs\ProvisionTenantJob;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\Storage;
use Exception;

class TestTenantProvisioning extends Command
{
    /**
     * The name and signature of the console command.
     */
    protected $signature = 'tenant:test-provisioning {--cleanup : Clean up test tenant after success}';

    /**
     * The console command description.
     */
    protected $description = 'Test Step 2: Automated tenant provisioning with comprehensive role/permission system';

    /**
     * Execute the console command.
     */
    public function handle(): int
    {
        $this->info('🚀 Starting Step 2 Tenant Provisioning Test');
        $this->info('==========================================');
        $this->newLine();

        try {
            // Clear Laravel caches to ensure clean state (skip database cache for testing)
            $this->line('🧹 Clearing caches...');
            Artisan::call('config:clear');
            try {
                Artisan::call('cache:clear');
            } catch (Exception $e) {
                $this->line('⚠️  Cache clear skipped (cache table not found)');
            }
            try {
                Artisan::call('permission:cache-reset');
            } catch (Exception $e) {
                $this->line('⚠️  Permission cache reset skipped (cache table not found)');
            }
            $this->info('✅ Caches cleared');
            $this->newLine();

            // Create a test tenant
            $this->line('📝 Creating test tenant...');
            $tenant = Tenant::create([
                'name' => 'Test Company Ltd',
                'slug' => 'test-company-' . time(),
                'email' => 'admin@testcompany.com',
                'status' => 'pending',
                'plan' => 'professional',
                'db_name' => '', // Will be generated by ProvisionTenantJob
                'db_username' => '', // Will be generated by ProvisionTenantJob
                'db_password' => '', // Will be generated by ProvisionTenantJob
                'db_host' => '127.0.0.1', // Set default host
                'db_port' => 3306, // Set default port
                'created_at' => now(),
                'updated_at' => now(),
            ]);

            $this->info("✅ Test tenant created: {$tenant->name} (ID: {$tenant->id})");
            $this->line("   Slug: {$tenant->slug}");
            $this->line("   Email: {$tenant->email}");
            $this->newLine();

            // Define admin user for the tenant
            $adminUser = [
                'name' => 'Test Admin',
                'user_name' => 'testadmin',
                'email' => 'admin@testcompany.com',
                'department_id' => null, // Will be set after departments are created
                'designation_id' => null, // Will be set after designations are created
                'is_active' => true,
                'email_verified_at' => now(),
            ];

            $this->line('👤 Admin user defined:');
            $this->line("   Name: {$adminUser['name']}");
            $this->line("   Email: {$adminUser['email']}");
            $this->newLine();

            // Test Step 2: Provision the tenant with comprehensive role/permission system
            $this->line('🔄 Starting tenant provisioning job...');
            $this->line('This will:');
            $this->line('  1. Generate database credentials');
            $this->line('  2. Create tenant database');
            $this->line('  3. Run cleaned-up migrations (57 files instead of 142+)');
            $this->line('  4. Seed comprehensive role/permission system (11+ modules)');
            $this->line('  5. Create admin user with Tenant Admin role');
            $this->line('  6. Setup default departments and settings');
            $this->line('  7. Configure storage and domain');
            $this->newLine();

            // Execute the provisioning job synchronously for testing
            $provisioningJob = new ProvisionTenantJob($tenant, $adminUser, true);
            
            $this->line('⏱️  Executing provisioning job...');
            $startTime = microtime(true);
            
            $provisioningJob->handle();
            
            $endTime = microtime(true);
            $duration = round($endTime - $startTime, 2);

            $this->newLine();
            $this->info('✅ Tenant provisioning completed successfully!');
            $this->line("   Duration: {$duration} seconds");
            $this->newLine();

            // Refresh tenant to see updated data
            $tenant->refresh();

            $this->line('📊 Tenant Provisioning Results:');
            $this->line('================================');
            $this->line("Tenant ID: {$tenant->id}");
            $this->line("Name: {$tenant->name}");
            $this->line("Slug: {$tenant->slug}");
            $this->line("Status: {$tenant->status}");
            $this->line("Database Name: {$tenant->db_name}");
            $this->line("Database Username: {$tenant->db_username}");
            $this->line("Storage Prefix: {$tenant->storage_prefix}");
            $this->newLine();

            // Test database connection
            $this->line('🔗 Testing tenant database connection...');
            $connectionName = "tenant_{$tenant->id}";
            $connectionConfig = array_merge(
                config('database.connections.tenant'),
                $tenant->getDatabaseConnection()
            );
            
            config(["database.connections.{$connectionName}" => $connectionConfig]);
            
            try {
                $pdo = DB::connection($connectionName)->getPdo();
                $this->info('✅ Database connection successful!');
                
                // Test role/permission system
                $this->newLine();
                $this->line('🔐 Testing comprehensive role/permission system...');
                
                // Count roles
                $roleCount = DB::connection($connectionName)->table('roles')->count();
                $this->line("   Roles created: {$roleCount}");
                
                // Count permissions
                $permissionCount = DB::connection($connectionName)->table('permissions')->count();
                $this->line("   Permissions created: {$permissionCount}");
                
                // Count departments
                $deptCount = DB::connection($connectionName)->table('departments')->count();
                $this->line("   Departments created: {$deptCount}");
                
                // Count users
                $userCount = DB::connection($connectionName)->table('users')->count();
                $this->line("   Users created: {$userCount}");
                
                // Check admin user role assignment
                $adminRoleAssignment = DB::connection($connectionName)
                    ->table('model_has_roles')
                    ->join('roles', 'model_has_roles.role_id', '=', 'roles.id')
                    ->where('roles.name', 'Tenant Admin')
                    ->where('model_type', 'App\\Models\\User')
                    ->count();
                $this->line("   Admin role assignments: {$adminRoleAssignment}");
                
                // List all modules with permission counts
                $this->newLine();
                $this->line('📋 Permission modules breakdown:');
                $modules = DB::connection($connectionName)
                    ->table('permissions')
                    ->select('module')
                    ->selectRaw('COUNT(*) as count')
                    ->groupBy('module')
                    ->orderBy('module')
                    ->get();
                    
                foreach ($modules as $module) {
                    $this->line("   {$module->module}: {$module->count} permissions");
                }
                
            } catch (Exception $e) {
                $this->error('❌ Database connection failed: ' . $e->getMessage());
                throw $e;
            }

            $this->newLine();
            $this->info('🎉 Step 2 Tenant Provisioning Test PASSED!');
            $this->info('===========================================');
            $this->info('✅ Migration cleanup successful (142+ → 57 files)');
            $this->info('✅ Comprehensive role/permission system deployed');
            $this->info('✅ Tenant database created and migrated');
            $this->info('✅ Admin user created with proper roles');
            $this->info('✅ Default departments and settings configured');
            $this->info('✅ Storage and domain setup completed');
            $this->newLine();
            
            $this->info('🚀 Ready for Step 3: Multi-tenant authentication and domain routing');

            // Cleanup if requested
            if ($this->option('cleanup')) {
                $this->line('🧹 Cleaning up test tenant...');
                $this->cleanupTestTenant($tenant);
                $this->info('✅ Test tenant cleaned up');
            } else {
                $this->line('💡 Use --cleanup flag to automatically remove test tenant');
            }

            return Command::SUCCESS;

        } catch (Exception $e) {
            $this->newLine();
            $this->error('❌ Tenant provisioning test FAILED!');
            $this->error('Error: ' . $e->getMessage());
            $this->line('Trace: ' . $e->getTraceAsString());
            
            // Cleanup on failure
            if (isset($tenant)) {
                $this->newLine();
                $this->line('🧹 Cleaning up failed test tenant...');
                $this->cleanupTestTenant($tenant);
                $this->info('✅ Cleanup completed');
            }
            
            return Command::FAILURE;
        }
    }

    /**
     * Clean up test tenant and associated resources.
     */
    private function cleanupTestTenant(Tenant $tenant): void
    {
        try {
            // Drop database if it was created
            if (!empty($tenant->db_name)) {
                $adminConnection = DB::connection('tenant_admin');
                $adminConnection->statement("DROP DATABASE IF EXISTS `{$tenant->db_name}`");
                
                // Drop user if it was created
                if (!empty($tenant->db_username)) {
                    $host = config('database.connections.tenant.host', '127.0.0.1');
                    $adminConnection->statement("DROP USER IF EXISTS '{$tenant->db_username}'@'{$host}'");
                }
            }
            
            // Remove storage directory if exists
            if (!empty($tenant->storage_prefix)) {
                Storage::deleteDirectory($tenant->storage_prefix);
            }
            
            // Remove domain entries
            Domain::where('tenant_id', $tenant->id)->delete();
            
            // Delete tenant record (package handles database cleanup)
            $tenant->delete();
            
        } catch (Exception $e) {
            $this->error("Failed to cleanup tenant {$tenant->slug}: " . $e->getMessage());
        }
    }
}
