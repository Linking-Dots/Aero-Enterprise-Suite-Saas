name: Glass ERP CI/CD - Phase 5 Production Pipeline

on:
  push:
    branches:
      - main
      - master
      - develop
      - 'release/*'
  pull_request:
    branches:
      - main
      - master
      - develop

env:
  NODE_VERSION: '18.x'
  PHP_VERSION: '8.3'

jobs:
  # Quality Gates - Performance and Code Quality
  quality-gates:
    name: Quality Gates & Performance Validation
    runs-on: ubuntu-latest
    outputs:
      performance-score: ${{ steps.performance.outputs.score }}
      quality-gate-passed: ${{ steps.quality-check.outputs.passed }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start Laravel server (for testing)
        run: |
          php artisan serve --port=8000 &
          sleep 5
        env:
          APP_ENV: testing

      - name: Run Performance Baseline Tests
        id: performance
        run: |
          npm run performance:test
          score=$(npm run performance:baseline | grep -o 'Performance Score: [0-9]*' | grep -o '[0-9]*')
          echo "score=$score" >> $GITHUB_OUTPUT
          
          # Performance Quality Gate
          if [ "$score" -lt 70 ]; then
            echo "‚ùå Performance Quality Gate Failed: Score $score < 70"
            exit 1
          else
            echo "‚úÖ Performance Quality Gate Passed: Score $score ‚â• 70"
          fi

      - name: Run Lighthouse CI
        run: |
          npm run lighthouse:ci
          
      - name: Bundle Analysis
        run: npm run bundle:analyze

      - name: Quality Gate Check
        id: quality-check
        run: |
          # Check for critical performance issues
          if [ -f "storage/app/performance/baseline.json" ]; then
            critical_issues=$(cat storage/app/performance/baseline.json | jq '.overall.totalIssues // 0')
            if [ "$critical_issues" -gt 5 ]; then
              echo "‚ùå Quality Gate Failed: $critical_issues critical issues found"
              echo "passed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
          echo "‚úÖ Quality Gate Passed"
          echo "passed=true" >> $GITHUB_OUTPUT

      - name: Generate Performance Report
        if: always()
        run: npm run performance:report

      - name: Upload Performance Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: |
            storage/app/reports/
            storage/app/performance/
          retention-days: 30

  laravel-tests-mysql:
    name: Laravel Tests (MySQL)
    runs-on: ubuntu-latest
    needs: quality-gates
    if: needs.quality-gates.outputs.quality-gate-passed == 'true'

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    env:
      DB_CONNECTION: mysql
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_DATABASE: test_db
      DB_USERNAME: root
      DB_PASSWORD: root
      CACHE_DRIVER: array
      SESSION_DRIVER: array
      QUEUE_DRIVER: sync

    steps:
      - uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, bcmath, mysql, xml, redis
          ini-values: post_max_size=256M, upload_max_filesize=256M
          coverage: xdebug

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Copy environment file
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Set directory permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Wait for MySQL
        run: |
          until mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot --silent; do
            echo 'Waiting for MySQL...'
            sleep 2
          done

      - name: Run database migrations
        run: php artisan migrate --force

      - name: Execute tests with coverage
        run: php artisan test --coverage --min=80

  laravel-tests-sqlite:
    name: Laravel Tests (SQLite)
    runs-on: ubuntu-latest
    needs: quality-gates
    if: needs.quality-gates.outputs.quality-gate-passed == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, bcmath, sqlite, xml

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Copy environment file
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Set directory permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Prepare SQLite database
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Run tests (SQLite)
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
          CACHE_DRIVER: array
          SESSION_DRIVER: array
          QUEUE_DRIVER: sync
        run: php artisan test --v

  react-tests:
    name: React Tests & Build
    runs-on: ubuntu-latest
    needs: quality-gates
    if: needs.quality-gates.outputs.quality-gate-passed == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npx eslint resources/js --ext .js,.jsx,.ts,.tsx --max-warnings 0

      - name: Run React tests
        run: npm test
        env:
          LARAVEL_BYPASS_ENV_CHECK: 1

      - name: Build for production
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: public/build/
          retention-days: 7

  security-scan:
    name: Security & Vulnerability Scan
    runs-on: ubuntu-latest
    needs: quality-gates
    if: needs.quality-gates.outputs.quality-gate-passed == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Run PHP Security Checker
        uses: StephaneBour/actions-php-security-checker@1.1
        with:
          composer-lock: './composer.lock'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level moderate

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Performance Monitoring Deployment
  performance-monitoring:
    name: Deploy Performance Monitoring
    runs-on: ubuntu-latest
    needs: [laravel-tests-mysql, laravel-tests-sqlite, react-tests, security-scan]
    if: github.ref == 'refs/heads/main' && success()

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate production performance baseline
        run: |
          npm run performance:baseline
          npm run performance:report

      - name: Upload to production monitoring
        run: |
          # This would upload to your monitoring service
          echo "üìä Uploading performance baseline to monitoring system..."
          # Example: curl -X POST $MONITORING_ENDPOINT -d @storage/app/performance/baseline.json

      - name: Setup performance alerts
        run: |
          echo "üö® Configuring performance monitoring alerts..."
          # Setup monitoring alerts for production

      - name: Deploy performance dashboard
        run: |
          echo "üìà Deploying performance dashboard..."
          # Deploy the generated dashboard to production

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [performance-monitoring]
    if: github.ref == 'refs/heads/main' && success()
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to production server
        run: |
          echo "üöÄ Deploying Glass ERP Phase 5 to production..."
          # Add your deployment commands here
          
      - name: Post-deployment performance check
        run: |
          echo "üîç Running post-deployment performance validation..."
          sleep 30  # Wait for deployment to stabilize
          npm run performance:test
          
      - name: Notify deployment success
        run: |
          echo "‚úÖ Glass ERP Phase 5 deployment completed successfully!"
          echo "üìä Performance Score: ${{ needs.quality-gates.outputs.performance-score }}"
